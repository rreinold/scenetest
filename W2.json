{
    "codeLibraries": {
        "W2MacFab": {
            "api": "",
            "code": "function stopTimer(timerCollection, id, complete) {\n    var nowDate = new Date(Date.now());\n    var tmpStr = nowDate.toString();\n    var theDateStr = tmpStr.substring(0, tmpStr.length - 10); //  Hack to get rid of milliseconds and the offset from GMT\n    var changes = { \"status\": 1, \"end\": theDateStr};\n    var updateQ = ClearBlade.Query();\n    updateQ.equalTo(\"ID\", id);\n    timerCollection.update(updateQ, changes, function (error, response) {\n        if (error === true) {\n            logStdErr(\"UPDATE TIMER ENTRY FAILED: \" + JSON.stringify(response));\n        } else {\n            logStdErr(\"UPDATE TIMER ENTRY SUCCEEDED: \" + JSON.stringify(response));\n        }\n    });\n    notifyUpdateClockInPortal();\n}\n\nfunction beginStartTimerProcess(timerCollection, edgeName, tagId, projectId, taskId) {\n    var newTimerEntry = {\n        \"task\": taskId,\n        \"project\": projectId,\n        \"status\": 3,\n        \"edge_name\": edgeName + \":\" + tagId,\n        \"notes\": \"RFID\"\n    };\n\n    timerCollection.create(newTimerEntry, function(error, response) {\n        if (error === true) {\n            logStdErr(\"CREATE NEW ROW IN TIMER TABLE FAILED: \" + JSON.stringify(response));\n        } else {\n            logStdErr(\"SUCCESSFULLY CREATED NEW ROW TIMER TABLE: \" + JSON.stringify(response));\n        }\n    });\n    notifyUpdateClockInPortal();\n}\n\nfunction notifyUpdateClockInPortal() {\n    var stuff =  doGetClockedInEmployees();\n    var tryClockIn = doGetTryingToClockIn();\n    var messaging = ClearBlade.Messaging({}, function(){});\n    messaging.publish(\"/w2macfab/clock/clockinout\", JSON.stringify(stuff));\n    messaging.publish(\"/w2macfab/clock/tryclockin\", JSON.stringify(tryClockIn));\n}\n\nfunction doGetClockedInEmployees() {\n    logStdErr(\"B\");\n    var timerC = ClearBlade.Collection({\"collectionName\": \"MacFab Timer\"});\n    var timerQ = ClearBlade.Query();\n    timerQ.equalTo(\"status\", 0);\n    timerQ.notEqualTo(\"project\", 0); // ignore bogus entries\n    timerQ.notEqualTo(\"task\", 0); // ignore bogus entries\n    var clockedIn;\n    timerC.fetch(timerQ, function(error, timerResp) {\n        if (error === true) {\n            logStdErr(\"Timer query failed: \" + JSON.stringify(timerResp));\n            return null;\n        }\n        clockedIn = timerResp.DATA;\n    });\n    var cLen = clockedIn.length;\n    var result = new Array(cLen);\n    logStdErr(\"C\");\n\n    var projCol = ClearBlade.Collection({\"collectionName\": \"MacFab Project\"});\n    var taskCol = ClearBlade.Collection({\"collectionName\": \"MacFab Task\"});\n    var projQ = null;\n    var taskQ = null;\n    if (cLen === 0) {\n        return [];\n    }\n    for (var i = 0; i \u003c cLen; i ++) {\n        var curRec = clockedIn[i];\n\n        //  Chain up or queries for project\n        var subPQ = ClearBlade.Query();\n        subPQ.equalTo(\"project_id\", curRec.project);\n        if (projQ === null) {\n            projQ = subPQ;\n        } else {\n            projQ.or(subPQ);\n        }\n        logStdErr(\"\");\n        logStdErr(\"PROJQ: \" + JSON.stringify(projQ));\n        logStdErr(\"\");\n\n        //  Chain up or queries for task\n        var subTQ = ClearBlade.Query();\n        subTQ.equalTo(\"task_id\", curRec.task);\n        if (taskQ === null) {\n            taskQ = subTQ;\n        } else {\n            taskQ.or(subTQ);\n        }\n\n    }\n\n    //  Now, fetch the tasks and projects related to the timer entries. What this all\n    //  boils down to is that we're faking out joins.\n    var projects, tasks;\n\n    projCol.fetch(projQ, function(error, r) {\n        if (error === true) {\n            logStdErr(\"project query failed: \" + JSON.stringify(r));\n            return null;\n        }\n        logStdErr(\"RESPONSE: \" + JSON.stringify(r));\n       \n        projects = r.DATA;\n    });\n\n    taskCol.fetch(taskQ, function(error, r) {\n        if (error === true) {\n            logStdErr(\"task query failed: \" + JSON.stringify(r));\n            return null;\n        }\n        tasks = r.DATA;\n    });\n\n    // Now, loop again, creating the \"joined\" rows/records\n    for (i = 0; i \u003c cLen; i ++) {\n        var timer = clockedIn[i];\n        theTask = findObjInList(tasks, \"task_id\", timer.task);\n        theProj = findObjInList(projects, \"project_id\", timer.project);\n        //logStdErr(\"PROJECTS: \" + JSON.stringify(projects));\n        if (theTask === null) {\n            logStdErr(\"AAAAAAHHHHH -- couldn't find task for \" + timer.task);\n            return null;\n        }\n        if (theProj === null) {\n            logStdErr(\"AAAAAAHHHHH -- couldn't find project for \" + timer.project);\n            return null;\n        }\n\n        result[i] = {\n            \"Name\": theTask.name,\n            \"Project\": theProj.name,\n            \"ProjectID\": timer.project,\n            \"ClockedIn\": timer.start,\n            \"Notes\": timer.notes\n        };\n    }\n\n    return result;\n}\n\nfunction findObjInList(list, key, value) {\n    for (var i = 0; i \u003c list.length; i ++) {\n        if (list[i][key] == value) {\n            return list[i];\n        }\n    }\n    return null;\n}\n\nfunction doGetTryingToClockIn() {\n    logStdErr(\"DO GET TRYING TO CLOCK IN\");\n    var timerCol = ClearBlade.Collection({\"collectionName\": \"MacFab Timer\"});\n    var taskCol = ClearBlade.Collection({\"collectionName\": \"MacFab Task\"});\n    var timerQ = ClearBlade.Query();\n    timerQ.equalTo(\"status\", 3);\n    var posers = null;\n    var results = [];\n    logStdErr(\"BOFFO!\");\n    timerCol.fetch(timerQ, function(error, r) {\n        if (error === true) {\n            log(\"fetch of timer table failed\");\n            resp.failure(\"Fetch of timer table failed\");\n        }\n        posers = r.DATA;\n    });\n    for (var i = 0; i \u003c posers.length; i++) {\n        logStdErr(\"LOOP\");\n        var curPoser = posers[i];\n        var edgeAndTag = curPoser.edge_name;\n        if (edgeAndTag === \"\") {\n            log(\"Skipping log in attempt with no edge/tag: \" + JSON.stringify(curPoser));\n            continue;\n        }\n        var splitEdgeAndTag = edgeAndTag.split(\":\");\n        if (splitEdgeAndTag.length !== 2) {\n            log(\"edge_name field has unknown format: \" + edgeAndTag);\n            continue;\n        }\n        var edgeName = splitEdgeAndTag[0];\n        var tagID = splitEdgeAndTag[1];\n        var taskQ = ClearBlade.Query();\n        taskQ.equalTo(\"tagID\", tagID);\n        taskCol.fetch(taskQ, function(error, r) {\n            if (error === true) {\n                log(\"task collection fetch failed\");\n                resp.failure(\"task collection fetch failed.\");\n            }\n            if (r.DATA.length === 0) {\n                log(\"could not find tag: \" + tagID + \" in task table\");\n                return;\n            }\n            var t = r.DATA[0];\n            var newEntry = {\n                \"Name\": t.name,\n                \"ClockInStarted\": curPoser.created,\n                \"TagID\": tagID,\n                \"Edge\": edgeName,\n                \"Task\": curPoser.task\n            };\n            results.push(newEntry);\n        });\n    }\n    return results;\n}\n\nfunction employeeIsClockingIn(tagID) {\n    var timerCol = ClearBlade.Collection({\"collectionName\": \"MacFab Timer\"});\n    var tq = ClearBlade.Query();\n\n    posers = doGetTryingToClockIn();\n    if (posers === null) {\n        resp.failure(\"Couldn't get folks trying to clock in\");\n    }\n    \n    for (var i = 0; i \u003c posers.length; i ++) {\n        var poser = posers[i];\n        if (tagID == poser.TagID) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction doFinishClockIn(taskId, projectId) {\n    var q = ClearBlade.Query();\n    var timerCol = ClearBlade.Collection({\"collectionName\": \"MacFab Timer\"});\n    q.equalTo(\"task\", taskId);\n    q.equalTo(\"status\", 3);\n    var nowDate = new Date(Date.now());\n    var tmpStr = nowDate.toString();\n    var theDateStr = tmpStr.substring(0, tmpStr.length - 10);\n    logStdErr(\"DATE IS \" + theDateStr);\n    var updates = {\n        \"status\": 0,\n        \"project\": projectId,\n        \"start\": theDateStr\n    };\n    var rval = true;\n    timerCol.update(q, updates, function(error, r) {\n    //timerCol.fetch(q, function(error, r) {\n        if (error === true) {\n            log(\"timer fetch failed\");\n            logStdErr(\"timer fetch failed\");\n            rval = false;\n            return\n        }\n        /*\n        if (r.DATA.length === 0) {\n            log(\"couldn't find anybody to log in\");\n            logStderr(\"Could not find anybody to log in\");\n            rval = false;\n            return;\n        }\n        */\n        logStdErr(\"SHOULD BE LOGGING IN\");\n    });\n    \n    notifyUpdateClockInPortal();\n    return rval;\n}\n",
            "dependencies": "clearblade,log",
            "description": "Convenience functions for accessing and integrating with macfab",
            "library_key": "eaa5cf840bc8e78ef7afdbcd7b::W2MacFab",
            "name": "W2MacFab",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "version": 1,
            "visibility": "system"
        }
    },
    "codeServices": {
        "barcodeScanned": {
            "code": "function barcodeScanned(req, resp){\n    ClearBlade.init({\"request\":req});\n    if (ClearBlade.isEdge() === false) {\n        logStdErr(\"barcodeScanned: Not an edge\");\n        resp.success(\"Not an edge\");\n    }\n    var myEdge = ClearBlade.edgeId();\n    logStdErr(\"In barcode scanned: \" + JSON.stringify(req));\n    var payload = JSON.parse(req.params.body);\n    var theBarcode = payload.barcode;\n    logStdErr(\"BARCODE IS \" + theBarcode);\n    var deviceName = req.userEmail;\n    logStdErr(\"DEVICE NAME IS \" + deviceName);\n    ClearBlade.updateDevice(deviceName, {state:myEdge + \"::\" + theBarcode}, true);\n}\n",
            "dependencies": "clearblade,log",
            "euid": "",
            "name": "barcodeScanned",
            "params": []
        },
        "cleanUpAbandonedClockIns": {
            "code": "function cleanUpAbandonedClockIns(req, resp){\n    ClearBlade.init({\"request\": req});\n    if (ClearBlade.isEdge() === true) {\n        resp.success(\"I am an edge. I'm not going to do anything\");\n        return;\n    }\n\n    var timerCol = ClearBlade.Collection({\"collectionName\": \"MacFab Timer\"});\n    var tq = ClearBlade.Query();\n    tq.equalTo(\"status\", 3);\n    var inProgress = null;\n    timerCol.fetch(tq, function(error, r) {\n        if (error === true) {\n            logStdErr(\"clearUpAbandonedClockIns: timer fetch failed\");\n            resp.failure(\"Error in fetch of timer collection\");\n            return;\n        }\n        inProgress = r.DATA;\n    });\n    for (var i = 0; i \u003c inProgress.length; i ++) {\n        var cur = inProgress[i];\n        logStdErr(\"\");\n        logStdErr(\"CLOCK IN CLEANUP: \" + JSON.stringify(cur));\n        logStdErr(\"\");\n        \n        var createdStr = cur.created;\n        var d = splitDateString(createdStr);\n        var month = fixMonth(d[1]);\n        var createdDate =  new Date(d[0], month, d[2], d[3], d[4], d[5], 0);\n        var nowDate = new Date(Date.now());\n        var diff = nowDate - createdDate;\n        var minutes = diff / (1000*60);\n        logStdErr(\"Date DIFF IS \" + JSON.stringify(minutes));\n        logStdErr(\"Created: \" + createdDate.toString() + \", Now: \" + nowDate.toString());\n        if (diff \u003e= 1) { // timeout can change to whatever you want\n            var uq = ClearBlade.Query();\n            uq.equalTo(\"ID\", cur.ID);\n            var updates = {\"status\": 1};\n            timerCol.update(uq, updates, function(error, r) {\n                if (error === true) {\n                    logStdErr(\"Strange update error ignored\");\n                    return;\n                }\n            });\n            logStdErr(\"We just clocked out this employee: \" + JSON.stringify(cur));\n        }\n    }\n    notifyUpdateClockInPortal();\n    resp.success(\"CLEAN UP PROCESSED: \" + JSON.stringify(inProgress)); \n}\n\nfunction fixMonth(m) {\n    var monthNum = Number(m) - 1;\n    return monthNum.toString();\n    \n}\n\nfunction splitDateString(ds) {\n\tvar dt = ds.split(\" \");\n\tvar ymd = dt[0].split(\"-\");\n\tvar hms = dt[1].split(\":\");\n\tvar rval = new Array(6);\n\trval[0] = ymd[0];\n\trval[1] = ymd[1];\n\trval[2] = ymd[2];\n\trval[3] = hms[0];\n\trval[4] = hms[1];\n\trval[5] = hms[2];\n\treturn rval;\n}\n",
            "dependencies": "clearblade,log,W2MacFab",
            "euid": "",
            "name": "cleanUpAbandonedClockIns",
            "params": []
        },
        "finishClockin": {
            "code": "function finishClockIn(req, resp){\n    log(JSON.stringify(req));\n    ClearBlade.init({\"request\": req});\n    var taskId = req.params.taskId;\n    var projectId = req.params.projectId;\n    taskIdStr = JSON.stringify(taskId);\n    projectIdStr = JSON.stringify(projectId);\n    logStdErr(\"taskId and projectId are \" + taskIdStr + \", \" + projectIdStr);\n\n    if (taskIdStr == undefined || taskIdStr == null || taskIdStr == \"\") {\n        resp.error(\"Remember to set the taskId parameter\");\n    }\n    if (projectIdStr == undefined || projectIdStr == null || projectIdStr == \"\") {\n        resp.error(\"Remember to set the projectId parameter\");\n    }\n    if (taskIdStr === projectIdStr) {\n        logStdErr(\"SAME\");\n        resp.error(\"task and project are the same\");\n    }\n    \n    if (doFinishClockIn(taskId, projectId) === false) {\n        resp.error(\"doFinishClockIn did not work\");\n    }\n    resp.success(\"The Employee should be clocked in\");\n}",
            "dependencies": "clearblade,log,W2MacFab",
            "euid": "",
            "name": "finishClockin",
            "params": [
                "taskId",
                "projectId"
            ]
        },
        "getClockedInEmployees": {
            "code": "function getClockedInEmployees(req, resp) {\n    ClearBlade.init({\"request\":req});\n    var stuff = doGetClockedInEmployees();\n    if (stuff === null) {\n        logStdErr(\"Call to getEmployees failed\");\n        resp.failure(\"Call to getEmployees failed\");\n    } else {\n        resp.success(stuff);\n    }\n}\n",
            "dependencies": "clearblade,log,W2MacFab",
            "euid": "",
            "name": "getClockedInEmployees",
            "params": []
        },
        "getTryingToClockIn": {
            "code": "function getTryingToClockIn(req, resp){\n    ClearBlade.init({\"request\":req});\n    posers = doGetTryingToClockIn();\n    if (posers === null) {\n        log(\"doGetTryingToClockIn return nill\");\n        resp.failure(\"Error trying to fetch posers\");\n    }\n    resp.success(posers);\n}",
            "dependencies": "clearblade,log,W2MacFab",
            "euid": "",
            "name": "getTryingToClockIn",
            "params": []
        },
        "processBarcodeScan": {
            "code": "function processBarcodeScan(req, resp){\n    ClearBlade.init({\"request\":req});\n    logStdErr(\"processBarcodeScan: \" + JSON.stringify(req));\n}",
            "dependencies": "clearblade,log,W2MacFab",
            "euid": "",
            "name": "processBarcodeScan",
            "params": []
        },
        "tagFoundTrigger": {
            "code": "var gTagId = \"Tag id not set\";\n\nvar getUserCallback = function(err, getResults) {\n    if (err === true) {\n        logStdErr(\"Query Failed\");\n        resp.failure(getResults);\n    }\n    logStdErr(\"getUser results: \" + JSON.stringify(getResults));\n    // Need to modify the user object\n    var user = getResults[\"Data\"][0];\n    var email = user[\"email\"];\n    var state = ClearBlade.edgeId() + \":\" + gTagId;\n    var uq = ClearBlade.Query();\n    uq.equalTo(\"email\", email);\n    ClearBlade.User().setUsers(uq, {\"state\": state});\n    logStdErr(\"DONE SETTING USERS: \" +  state);\n};\n\nfunction tagFoundTrigger(req, resp) {\n    logStdErr(\"In Tag Found Trigger: \" + req.params.body );\n    ClearBlade.init({request:req});\n\n    if (ClearBlade.isEdge() === false) {\n        resp.success(\"Ignoring, I'm not an edge\");\n    }\n    var edgeName = ClearBlade.edgeId();\n    logStdErr(\"My edge name is: \" + edgeName);\n    var body = JSON.parse(req.params.body);\n\n    var q = ClearBlade.Query();\n    q.equalTo(\"tag_id\", body.tagId);\n    gTagId = body.tagId;\n\n    ClearBlade.User().allUsers(q, getUserCallback);\n    logStdErr(\"GONNA DO RESP.SUCCESS NOW\");\n    resp.success(\"Hmmm\");\n}\n",
            "dependencies": "clearblade,log",
            "euid": "",
            "name": "tagFoundTrigger",
            "params": []
        },
        "tagUserUpdatedTrigger": {
            "code": "function tagUserUpdatedTrigger(req, resp) {\n    logStdErr(\"tagUserUpdatedTrigger: \" + JSON.stringify(req));\n    var stuff = req.params.user.state;\n    logStdErr(\"STUFF: \" + stuff);\n    var parts = stuff.split(\":\");\n    logStdErr(\"Edge: \" + parts[0] + \", Tag ID: \" + parts[1]);\n      \n    var edgeID = parts[0];\n    var tagID = parts[1];\n\n    ClearBlade.init({\"request\":req});\n    var timerCol = ClearBlade.Collection({\"collectionName\": \"MacFab Timer\"});\n    var taskCol = ClearBlade.Collection({\"collectionName\": \"MacFab Task\"});\n    var taskQ = ClearBlade.Query();\n    taskQ.equalTo(\"tagID\", tagID);\n    var taskId = \"unknown\";\n    taskCol.fetch(taskQ, function(error, response) {\n        if (error === true) {\n            logStdErr(\"task fetch failed: \" + JSON.stringify(response));\n            resp.failure(\"Task query failure\");\n        }\n        if (response.DATA.length === 0) {\n            var errStr = \"Could not find tag \" + tagId;\n            logStdErr(errStr);\n            resp.failure(errStr);\n        }\n        taskId = response.DATA[0].task_id;\n    });\n    \n    //  If the employee taps his tag more than once, throw away the extra taps\n    if (employeeIsClockingIn(tagID) === true) {\n        logStdErr(\"WOWOWOWO -- USER IS CLOCKING IN ALREAYD\");\n        resp.success(\"Employee is already trying to clock in\");\n    }\n\n    var timerQ = ClearBlade.Query();\n    logStdErr(\"TASK ID IS \" + taskId);\n    timerQ.equalTo(\"task\", taskId);\n\ttimerQ.equalTo(\"status\", 0);\n    timerCol.fetch(timerQ, function(error, response) {\n        if (error === true) {\n            logStdErr(\"timer fetch failed: \" + JSON.stringify(response));\n            resp.failure(\"Timer query failure\");\n        }\n        logStdErr(\"BOTH QUERIES WORKED: \" + JSON.stringify(response));\n        var stuff = response.DATA;\n        if (stuff.length === 0) {\n            logStdErr(\"NEED TO CREATE NEW TIMER\");\n            beginStartTimerProcess(timerCol, edgeID, tagID, 102082, taskId);\n        } else {\n            logStdErr(\"NEED TO END CURRENT TIMER: \" + stuff[0].ID);\n            stopTimer(timerCol, stuff[0].ID, 0);\n        }\n    });\n\n    resp.success(\"Done\");\n}\n",
            "dependencies": "clearblade,log,http,W2MacFab",
            "euid": "",
            "name": "tagUserUpdatedTrigger",
            "params": []
        },
        "updateClockedInPortal": {
            "code": "function updateClockedInPortal(req, resp){\n    ClearBlade.init({\"request\":req});\n    notifyUpdateClockInPortal();\n    resp.success(\"\");\n}",
            "dependencies": "clearblade,log,http,W2MacFab",
            "euid": "",
            "name": "updateClockedInPortal",
            "params": []
        }
    },
    "collections": {
        "JobHistory": "eaa5cf840bf2bbaea78ab294c89801"
    },
    "connectCollections": {
        "MacFab Project": "eaa5cf840bfa84c2b59ffbe5b509",
        "MacFab Task": "eca5cf840baa8cffa9ddfd97aed101",
        "MacFab Timer": "eca5cf840b9af093f6ba9dd7d156"
    },
    "developer": {
        "email": "dev@w2macfab.com",
        "password": "IAmTheDev",
        "userId": null
    },
    "developers": {},
    "devices": {
        "041C19EAFC3881": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": false,
            "allow_key_auth": true,
            "certificate": "I do not have one",
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 041C19EAFC3881",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "location": "Initial Location",
            "name": "041C19EAFC3881",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Card"
        },
        "0421430AF04981": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": false,
            "allow_key_auth": true,
            "certificate": "I do not have one",
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 0421430AF04981",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "location": "Initial Location",
            "name": "0421430AF04981",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Sticker"
        },
        "047229EAFC3880": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": true,
            "allow_key_auth": true,
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 047229EAFC3880",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "name": "047229EAFC3880",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Card"
        },
        "047C400AF04980": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": false,
            "allow_key_auth": true,
            "certificate": "I do not have one",
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 047C400AF04980",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "location": "Initial Location",
            "name": "047C400AF04980",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Sticker"
        },
        "048C25EAFC3880": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": false,
            "allow_key_auth": true,
            "certificate": "I do not have one",
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 048C25EAFC3880",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "location": "Initial Location",
            "name": "048C25EAFC3880",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Card"
        },
        "04BB400AF04980": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": false,
            "allow_key_auth": true,
            "certificate": "I do not have one",
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 04BB400AF04980",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "location": "Initial Location",
            "name": "04BB400AF04980",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Sticker"
        },
        "04C9440AF04980": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": false,
            "allow_key_auth": true,
            "certificate": "I do not have one",
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 04C9440AF04980",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "location": "Initial Location",
            "name": "04C9440AF04980",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Sticker"
        },
        "04EE420AF04980": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": false,
            "allow_key_auth": true,
            "certificate": "I do not have one",
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Shut up",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: 04EE420AF04980",
            "enabled": true,
            "job": "",
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "location": "Initial Location",
            "name": "04EE420AF04980",
            "roles": [],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Sticker"
        },
        "Metrologic Barcode Reader": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": true,
            "allow_key_auth": true,
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Barcode reading for clocking in and clocking out",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: Metrologic Barcode Reader",
            "enabled": true,
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "name": "Metrologic Barcode Reader",
            "roles": [
                "User Table Updater"
            ],
            "state": "Where dem barcodes?",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Barcode Reader"
        },
        "NFC Reader 1": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": true,
            "allow_key_auth": true,
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "located at main office entry",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: NFC Reader 1",
            "enabled": true,
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "name": "NFC Reader 1",
            "roles": [
                "User Table Updater"
            ],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Reader"
        },
        "NFC Reader 2": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": true,
            "allow_key_auth": true,
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Located at side entry",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: NFC Reader 2",
            "enabled": true,
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "name": "NFC Reader 2",
            "roles": [
                "User Table Updater"
            ],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Reader"
        },
        "NFC Reader 3": {
            "__HostId__": "267ed272-0e15-4b1e-9055-7ff2dda241e2",
            "active_key": "I Be Active",
            "allow_certificate_auth": true,
            "allow_key_auth": true,
            "created_date": "2016-12-08T17:15:02-06:00",
            "description": "Located at back entry",
            "device_key": "eaa5cf840bc8e78ef7afdbcd7b :: NFC Reader 3",
            "enabled": true,
            "keys": "I Be Active:I Am Not Active",
            "last_active_date": "2016-12-08T17:15:02-06:00",
            "name": "NFC Reader 3",
            "roles": [
                "User Table Updater"
            ],
            "state": "Lost",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "type": "Tag Reader"
        }
    },
    "edges": {
        "Main Entry": {
            "description": "The entrance right off of the office",
            "edge_key": "eaa5cf840bc8e78ef7afdbcd7b:Main Entry",
            "name": "Main Entry",
            "novi_system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01",
            "token": "Main Entry Token"
        },
        "Side Entry": {
            "description": "The entrance to the left of the office",
            "edge_key": "eaa5cf840bc8e78ef7afdbcd7b:Side Entry",
            "name": "Side Entry",
            "novi_system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01",
            "token": "Side Entry Token"
        },
        "Tag Registration": {
            "description": "Raspberry Pi used for registering and assigning RFID tags",
            "edge_key": "eaa5cf840bc8e78ef7afdbcd7b:Tag Registration",
            "name": "Tag Registration",
            "novi_system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01",
            "token": "Tag Registration Token"
        }
    },
    "items": {},
    "messagingUrl": "127.0.0.1:1883",
    "platformUrl": "http://127.0.0.1:9000",
    "portals": {
        "Clocked In": {
            "config": "{\"allow_edit\":true,\"columns\":5,\"datasources\":[{\"name\":\"Fetch Clocked In Employees\",\"settings\":{\"code_name\":\"getClockedInEmployees\",\"default_payload\":\"{}\",\"refresh_interval\":0},\"type\":\"clearblade_execute_code\"},{\"name\":\"Employees Trying To Clock In\",\"settings\":{\"code_name\":\"getTryingToClockIn\",\"default_payload\":\"{}\",\"refresh_interval\":0},\"type\":\"clearblade_execute_code\"},{\"name\":\"Somebody is trying to clock in\",\"settings\":{\"topic_name\":\"/w2macfab/clock/tryclockin\"},\"type\":\"messageTopic\"},{\"name\":\"Somebody clocked in or out\",\"settings\":{\"topic_name\":\"/w2macfab/clock/clockinout\"},\"type\":\"messageTopic\"},{\"name\":\"finishClockIn\",\"settings\":{\"code_name\":\"finishClockIn\",\"default_payload\":\"{\\\"taskId\\\":0,\\\"projectId\\\":0}\",\"name\":\"finishClockIn\",\"refresh_interval\":0},\"type\":\"clearblade_execute_code\"}],\"panes\":[{\"col\":{\"3\":1,\"4\":1,\"5\":1,\"6\":1},\"col_width\":\"10\",\"display_header\":false,\"header_theme\":\"primary\",\"row\":{\"3\":1,\"4\":1,\"5\":1,\"6\":1},\"title\":\"Currently Clocked In Employees\",\"widgets\":[{\"settings\":{\"_datatype\":\"static\",\"height\":1,\"widgetContent\":\"\\u003ch1 style=color:green\\u003e\\u003ccenter\\u003eCurrently Clocked In Employees\\u003c/center\\u003e\\u003c/h1\\u003e\"},\"type\":\"html\"},{\"settings\":{\"_datatype\":\"dynamic\",\"height\":8,\"widgetContent\":[{\"dsName\":\"Somebody clocked in or out\",\"incoming_parser\":\"var beginTable = \\\"\\u003cdiv style=\\\\\\\"height:500px;width:100%;overflow:scroll\\\\\\\"\\u003e\\u003ctable style=\\\\\\\"width:100%\\\\\\\"\\u003e\\\";\\nvar tableHeader = \\\"\\u003cthead\\u003e\\u003ctr style=\\\\\\\"font-size:150%;color:yellow;font-family:helvetica\\\\\\\"\\u003e\\u003cth\\u003eEmployee Name\\u003c/th\\u003e\\u003cth\\u003eProject Name\\u003c/th\\u003e\\u003cth\\u003eProject ID\\u003c/th\\u003e\\u003cth\\u003eClocked In Time\\u003c/th\\u003e\\u003cth\\u003eNotes\\u003c/th\\u003e\\u003c/tr\\u003e\\u003c/thead\\u003e\\\"\\nvar endTable = \\\"\\u003c/table\\u003e\\u003c/div\\u003e\\\";\\nvar msgString = this.datasource;\\nvar all = JSON.parse(msgString);\\nvar tableBody = \\\"\\\";\\nfor (var i = 0; i \\u003c all.length; i ++) {\\n    var cur = all[i];\\n    tableBody = tableBody.concat(\\\"\\u003ctr\\u003e\\u003ctd\\u003e\\\" + cur.Name + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.Project + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.ProjectID + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.ClockedIn + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.Notes + \\\"\\u003c/td\\u003e\\u003c/tr\\u003e\\\");\\n}\\n\\nreturn beginTable + tableHeader + tableBody + endTable;\"}]},\"type\":\"html\"},{\"settings\":{\"_datatype\":\"static\",\"height\":1,\"widgetContent\":\"\\u003ch1 style=color:green\\u003e\\u003ccenter\\u003eEmployees Trying To Clock In\\u003c/center\\u003e\\u003c/h1\\u003e\"},\"type\":\"html\"},{\"settings\":{\"_datatype\":\"dynamic\",\"height\":4,\"widgetContent\":[{\"dsName\":\"Somebody is trying to clock in\",\"incoming_parser\":\"// default - return the value for the datasource \\nconsole.log(\\\"starting\\\");\\n/*\\n\\tvar pendingUsers = [\\n\\t\\t{\\\"name\\\":\\\"Aaron\\\"},\\n\\t\\t{\\\"name\\\":\\\"Clark\\\"},\\n\\t\\t{\\\"name\\\":\\\"Rob\\\"}\\n\\t];\\n    */\\n\\n\\tvar openOrders = [\\n\\t\\t{\\\"id\\\":\\\"68027\\\",\\\"label\\\":\\\"Administration\\\"},\\n\\t\\t{\\\"id\\\":\\\"87411\\\",\\\"label\\\":\\\"W2 Clean\\\"}\\n\\t];\\n\\n\\tvar createCombo = function(index) {\\n\\t\\tvar select = document.createElement('select');\\n\\t\\tselect.id = \\\"select\\\"+index;\\n\\t\\tfor (var i=0; i \\u003c openOrders.length; i ++){\\n\\t\\t\\tvar option = document.createElement( 'option' );\\n\\n\\t        option.value = openOrders[i].id;\\n\\t        option.textContent = openOrders[i].id + \\\"  -  \\\"+openOrders[i].label;\\n\\n\\t        select.appendChild( option );\\n\\t\\t}\\n\\t\\treturn select;\\n\\t\\t\\n\\t}\\n\\n\\tvar buttonClickString = \\\"var buttonClick =  function(index){\\\" +\\n        \\\"console.log('hello:'+index); \\\"+\\n       \\\"datasources['finishClockIn'].sendData({'taskId':5, 'projectId':5});\\\"+\\n\\t   \\\"var selectedInx = document.getElementById(\\\\\\\"selectkey\\\\\\\"+index); \\\"+\\n        \\\"console.log(JSON.stringify(selectedInx));\\\"+ \\n    // \\\"\\t\\talert(\\\\\\\"you have picked job: \\\\\\\"+openOrders[selectedInx].id); };\\\";\\n    \\\"};\\\";\\n\\tvar createButton = function(index) {\\n\\t\\t// var button = document.createElement('button');\\n\\t\\t// button.onClick = buttonClick;\\n\\t\\tbutton = document.createElement('input');\\n        button.type = 'button';\\n        button.value = \\\"Start\\\";//buttonsToCreate[i];\\n        button.id = \\\"button_\\\"+index;//buttonsToCreate[i];\\n        button.setAttribute(\\\"selectkey\\\",\\\"select\\\"+index);\\n        button.setAttribute(\\\"onclick\\\",\\\"buttonClick(\\\"+index+\\\")\\\");\\n        //button.onclick = function(){\\n       //     // alert(\\\"i happened at \\\"+this.id);\\n       //     var selectedInx = document.getElementById(this.getAttribute(\\\"selectkey\\\")).selectedIndex;\\n        //    alert(\\\"you have picked job: \\\"+openOrders[selectedInx].id);\\n        //};\\n\\t\\treturn button;\\n\\t};\\n\\tvar renderTable= function(that){\\n     \\n        var divy = document.createElement(\\\"div\\\");\\n        var tbl     = document.createElement(\\\"table\\\");\\n        tbl.style.width = \\\"100%\\\";\\n        var tblBody = document.createElement(\\\"tbody\\\");\\n        console.log(\\\"FFF\\\");\\n\\t\\tvar hrow = tblBody.insertRow(0);\\n        hrow.style.color = \\\"yellow\\\";\\n        hrow.style.fontSize = \\\"150%\\\";\\n        var hCell1 = document.createElement(\\\"th\\\");\\n        var hCell2 = document.createElement(\\\"th\\\");\\n        var hCell3 = document.createElement(\\\"th\\\");\\n        var hCell4 = document.createElement(\\\"th\\\");\\n        var hCell5 = document.createElement(\\\"th\\\");\\n        var hCell6 = document.createElement(\\\"th\\\");\\n        var hCell7 = document.createElement(\\\"th\\\");\\n       \\n        \\n        //var hCell1 = row.insertHeader(0);\\n        //var hCell2 = row.insertHeader(1);\\n        //var hCell3 = row.insertHeader(2);\\n        \\n        hCell1.innerHTML = \\\"Name\\\";\\n        hCell2.innerHTML = \\\"Task\\\";\\n        hCell3.innerHTML = \\\"Clock In Began\\\";\\n        hCell4.innerHTML = \\\"Edge Name\\\";\\n        hCell5.innerHTML = \\\"Tag ID\\\";\\n        hCell6.innerHTML = \\\"Project\\\";\\n        hCell7.innerHTML = \\\"Clock In\\\";\\n        hrow.appendChild(hCell1);\\n        hrow.appendChild(hCell2);\\n        hrow.appendChild(hCell3);\\n            hrow.appendChild(hCell4);\\n             hrow.appendChild(hCell5);\\n             hrow.appendChild(hCell6);\\n             hrow.appendChild(hCell7);\\n            \\n       \\n        var msgString = that.datasource;\\n        console.log(\\\"checking out my datasource: \\\"+msgString);\\n        var pendingUsers = JSON.parse(msgString);\\n        console.log(\\\"parsed the users\\\");\\n      \\n\\t\\tfor (var i=0; i\\u003cpendingUsers.length; i++){\\n            \\n\\t\\t\\t// Create an empty \\u003ctr\\u003e element and add it to the 1st position of the table:\\n            \\n\\t\\t\\tvar row = tblBody.insertRow(i+1);\\n\\n\\t\\t\\t// Insert new cells (\\u003ctd\\u003e elements) at the 1st and 2nd position of the \\\"new\\\" \\u003ctr\\u003e element:\\n    \\n\\t\\t\\tvar cell1 = row.insertCell(0);\\n\\t\\t\\tvar cell2 = row.insertCell(1);\\n\\t\\t\\tvar cell3 = row.insertCell(2);\\n            var cell4 = row.insertCell(3);\\n          \\n            var cell5 = row.insertCell(4);\\n            var cell6 = row.insertCell(5);\\n            var cell7 = row.insertCell(6);\\n   \\n\\t\\t\\t// Add some text to the new cells:\\n            \\n\\t\\t\\tcell1.innerHTML = pendingUsers[i].Name;\\n            \\t\\t\\tcell2.innerHTML = pendingUsers[i].Task;\\n            \\t\\t\\tcell3.innerHTML = pendingUsers[i].ClockInStarted;\\n            \\t\\t\\tcell4.innerHTML = pendingUsers[i].Edge;\\n            \\t\\t\\tcell5.innerHTML = pendingUsers[i].TagID;\\n            \\n\\t\\t\\tcell6.appendChild( createCombo(i) );\\n\\t\\t\\tcell7.appendChild(createButton(i) );\\n          \\n\\t\\t}\\n        \\n        tbl.appendChild(tblBody);\\n        divy.appendChild(tbl);\\n        \\n        var clickScript = document.createElement(\\\"script\\\");\\n        clickScript.text = buttonClickString;\\n        divy.appendChild(clickScript);\\n        return divy;\\n\\t}\\n    console.log(\\\"gonna try it now: \\\"+ JSON.stringify(datasources));\\n\\nvar temp = renderTable(this);\\nconsole.log(\\\"I rendered the table: \\\"+temp.innerHTML);\\nreturn temp.innerHTML;    \\n//var beginTable = \\\"\\u003cdiv style=\\\\\\\"height:200px;width:100%;overflow:scroll\\\\\\\"\\u003e\\u003ctable style=\\\\\\\"width:100%\\\\\\\"\\u003e\\\";\\n//var tableHeader = \\\"\\u003cthead\\u003e\\u003ctr style=\\\\\\\"font-size:150%;color:yellow;font-family:helvetica\\\\\\\"\\u003e\\u003cth\\u003eEmployee Name\\u003c/th\\u003e\\u003cth\\u003eTask\\u003c/th\\u003e\\u003cth\\u003eClock In Began\\u003c/th\\u003e\\u003cth\\u003eEdge Name\\u003c/th\\u003e\\u003cth\\u003eTag ID\\u003c/th\\u003e\\u003cth\\u003eProject\\u003c/th\\u003e\\u003cth\\u003eClock In\\u003c/th\\u003e\\u003c/tr\\u003e\\u003c/thead\\u003e\\\"\\n//var endTable = \\\"\\u003c/table\\u003e\\u003c/div\\u003e\\\";\\n//var msgString = this.datasource;\\n//var all = JSON.parse(msgString);\\n//var tableBody = \\\"\\\";\\n//for (var i = 0; i \\u003c all.length; i ++) {\\n//    var cur = all[i];\\n//    tableBody = tableBody.concat(\\\"\\u003ctr\\u003e\\u003ctd\\u003e\\\" + cur.Name + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.Task + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.ClockInStarted + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.Edge + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\\" + cur.TagID + \\\"\\u003c/td\\u003e\\u003ctd\\u003e\\u003c/td\\u003e\\u003ctd\\u003e\\u003c/td\\u003e\\u003c/tr\\u003e\\\");\\n//}\\n\\n//return beginTable + tableHeader + tableBody + endTable;\"},{\"dsName\":\"finishClockIn\",\"incoming_parser\":\"// default - return the value for the datasource \\nreturn this.datasource;\"}]},\"type\":\"html\"}],\"width\":1}],\"plugins\":[],\"style\":\"{\\\"portal\\\":{\\\"background\\\":\\\"#1F3845\\\",\\\"fontFamily\\\":\\\"\\\\\\\"Lucida Sans Unicode\\\\\\\", \\\\\\\"Lucida Grande\\\\\\\", sans-serif\\\"},\\\"panes\\\":{\\\"backgroundColor\\\":\\\"#2a2a2a\\\",\\\"border\\\":\\\"thin solid #2a2a2a\\\",\\\"headingHeight\\\":\\\"30px\\\",\\\"primaryHeadingBackgroundColor\\\":\\\"rgba(110,6,33,1)\\\",\\\"primaryHeadingFontSize\\\":\\\"24px\\\",\\\"primaryHeadingTextColor\\\":\\\"#FFFFFF\\\",\\\"secondaryHeadingBackgroundColor\\\":\\\"#263238\\\",\\\"secondaryHeadingFontSize\\\":\\\"16px\\\",\\\"secondaryHeadingTextColor\\\":\\\"#FFFFFF\\\"},\\\"widgets\\\":{\\\"background\\\":\\\"transparent\\\",\\\"bodyFontSize\\\":\\\"18px\\\",\\\"bodyTextColor\\\":\\\"rgba(250,50,1,1)\\\",\\\"border\\\":\\\"thin solid\\\",\\\"headingFontSize\\\":\\\"24px\\\",\\\"headingFontWeight\\\":\\\"400\\\",\\\"headingTextColor\\\":\\\"rgba(187,10,56,1)\\\"},\\\"forms\\\":{\\\"numberInputBackgroundColor\\\":\\\"#272727\\\",\\\"numberInputTextColor\\\":\\\"#d3d4d4\\\",\\\"textInputBackgroundColor\\\":\\\"#272727\\\",\\\"textInputTextColor\\\":\\\"#d3d4d4\\\"}}\",\"version\":1}",
            "description": "Displays currently clocked in employees as well as employees going through the clock in process.",
            "name": "Clocked In",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b"
        }
    },
    "roles": {
        "Admin": "Admin",
        "Anonymous": "Anonymous",
        "Authenticated": "Authenticated",
        "Employee": "eaa5cf840be6a0d288ddb2f9a9c901",
        "Owner": "eaa5cf840baeb7b3baefb8cde21c",
        "Portal Accessor": "eaa5cf840b948d9af781daf5cacb01",
        "Uber Device": "eaa5cf840bf0c8dead88cae8962c",
        "User Table Updater": "eaa5cf840bf6dfd4d8f3cce8b8b701"
    },
    "systemKey": "eaa5cf840bc8e78ef7afdbcd7b",
    "systemSecret": "EAA5CF840B96E7D6B9B1E4B1CFAD01",
    "systems": {},
    "teardown": {
        "adminClient": {
            "DevToken": "gfP71ki4EEq89E1xagC8tI11M_3zZXXSckP15k_EUe9-zxEarMfPezQc0h_pE9ePm4yXHYeva0k3Hgnqjw==",
            "MQTTClient": null,
            "Email": "dev@w2macfab.com",
            "Password": "IAmTheDev",
            "HttpAddr": "http://127.0.0.1:9000",
            "MqttAddr": "127.0.0.1:1883"
        },
        "collections": [
            "eaa5cf840bf2bbaea78ab294c89801"
        ],
        "connectCollections": [
            "eaa5cf840bfa84c2b59ffbe5b509",
            "eca5cf840b9af093f6ba9dd7d156",
            "eca5cf840baa8cffa9ddfd97aed101"
        ],
        "dev_email": "dev@w2macfab.com",
        "dev_password": "IAmTheDev",
        "developer": null,
        "developers": [],
        "devices": [
            "Metrologic Barcode Reader",
            "NFC Reader 1",
            "NFC Reader 2",
            "NFC Reader 3",
            "047229EAFC3880",
            "041C19EAFC3881",
            "048C25EAFC3880",
            "0421430AF04981",
            "04C9440AF04980",
            "047C400AF04980",
            "04EE420AF04980",
            "04BB400AF04980"
        ],
        "edgeSync": {
            "Main Entry": {
                "library": [
                    "W2MacFab"
                ],
                "service": [
                    "barcodeScanned",
                    "getTryingToClockIn",
                    "finishClockin",
                    "getClockedInEmployees",
                    "tagFoundTrigger"
                ],
                "trigger": [
                    "barcodeScannedTrigger",
                    "TagFoundHandler"
                ]
            },
            "Side Entry": {
                "library": [
                    "W2MacFab"
                ],
                "service": [
                    "barcodeScanned",
                    "getTryingToClockIn",
                    "finishClockin",
                    "getClockedInEmployees",
                    "tagFoundTrigger"
                ],
                "trigger": [
                    "barcodeScannedTrigger",
                    "TagFoundHandler"
                ]
            },
            "Tag Registration": {
                "library": [
                    "W2MacFab"
                ],
                "service": [
                    "barcodeScanned",
                    "getClockedInEmployees",
                    "tagFoundTrigger"
                ],
                "trigger": [
                    "barcodeScannedTrigger",
                    "TagFoundHandler"
                ]
            }
        },
        "edges": [
            "Main Entry",
            "Side Entry",
            "Tag Registration"
        ],
        "libraries": [
            "W2MacFab"
        ],
        "messagingUrl": "127.0.0.1:1883",
        "platformUrl": "http://127.0.0.1:9000",
        "portals": [
            "Clocked In"
        ],
        "roles": [
            "eaa5cf840baeb7b3baefb8cde21c",
            "eaa5cf840be6a0d288ddb2f9a9c901",
            "eaa5cf840bf6dfd4d8f3cce8b8b701",
            "eaa5cf840bf0c8dead88cae8962c",
            "eaa5cf840b948d9af781daf5cacb01"
        ],
        "services": [
            "processBarcodeScan",
            "barcodeScanned",
            "getTryingToClockIn",
            "finishClockin",
            "getClockedInEmployees",
            "cleanUpAbandonedClockIns",
            "tagFoundTrigger",
            "tagUserUpdatedTrigger",
            "updateClockedInPortal"
        ],
        "systemKey": "eaa5cf840bc8e78ef7afdbcd7b",
        "systemSecret": "EAA5CF840B96E7D6B9B1E4B1CFAD01",
        "systems": [],
        "timers": [
            "Clean up abandoned clock in attempts"
        ],
        "triggers": [
            "processBarcodeScanTrigger",
            "barcodeScannedTrigger",
            "TagFoundHandler",
            "tagUserUpdatedHandler"
        ],
        "users": [
            "eaa5cf840bb8b5ad8ad696b78fc801",
            "eaa5cf840be283c396b8c7c0f99b01",
            "eaa5cf840bb8808fd1cad7b78c44",
            "eaa5cf840bb49ffd8b97d1dfcfbd01",
            "eaa5cf840bdcc7f4efdfa08cde8201",
            "eaa5cf840be0dedfc0ced2dec331",
            "eaa5cf840bc0a68196eccea1fb11",
            "eaa5cf840bfca2cafdee9f9bd16f",
            "eaa5cf840bfeacf5dcaadec3a848",
            "eaa5cf840b92e0c596c3f78efc34"
        ]
    },
    "timers": {
        "Clean up abandoned clock in attempts": {
            "description": "Sometimes employees don't finish the clock in process",
            "frequency": 300,
            "name": "Clean up abandoned clock in attempts",
            "repeats": -1,
            "service_name": "cleanUpAbandonedClockIns",
            "start_time": "2016-12-08T17:15:02.566521046-06:00",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01",
            "timer_key": "eaa5cf840bc8e78ef7afdbcd7b::Clean up abandoned clock in attempts",
            "user_id": "ccfcf6830b90fe94aecc988dd2a601",
            "user_token": "gfP71ki4EEq89E1xagC8tI11M_3zZXXSckP15k_EUe9-zxEarMfPezQc0h_pE9ePm4yXHYeva0k3Hgnqjw=="
        }
    },
    "triggers": {
        "TagFoundHandler": {
            "event_definition": {
                "def_keys": [
                    "topic"
                ],
                "def_module": "Messaging",
                "def_name": "Publish",
                "visibility": true
            },
            "key_value_pairs": {
                "topic": "/tag/found"
            },
            "name": "TagFoundHandler",
            "service_name": "tagFoundTrigger",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01"
        },
        "barcodeScannedTrigger": {
            "event_definition": {
                "def_keys": [
                    "topic"
                ],
                "def_module": "Messaging",
                "def_name": "Publish",
                "visibility": true
            },
            "key_value_pairs": {
                "topic": "/w2macfab/barcode"
            },
            "name": "barcodeScannedTrigger",
            "service_name": "barcodeScanned",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01"
        },
        "processBarcodeScanTrigger": {
            "event_definition": {
                "def_keys": [
                    "deviceName"
                ],
                "def_module": "Device",
                "def_name": "DeviceUpdated",
                "visibility": true
            },
            "key_value_pairs": {},
            "name": "processBarcodeScanTrigger",
            "service_name": "processBarcodeScan",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01"
        },
        "tagUserUpdatedHandler": {
            "event_definition": {
                "def_keys": [
                    "userId"
                ],
                "def_module": "User",
                "def_name": "UserUpdated",
                "visibility": true
            },
            "key_value_pairs": {},
            "name": "tagUserUpdatedHandler",
            "service_name": "tagUserUpdatedTrigger",
            "system_key": "eaa5cf840bc8e78ef7afdbcd7b",
            "system_secret": "EAA5CF840B96E7D6B9B1E4B1CFAD01"
        }
    },
    "users": {
        "billy@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "billy@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840bfca2cafdee9f9bd16f",
            "user_token": "gSJ-sGegDTv_lEtu7yHQm3Gsbhf0E2vjoEEIjrvQDXW1qwHUIAPOiKm--S-UbcwqkVgvXKlzlkmjAyOtuw=="
        },
        "bob@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "bob@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840bfeacf5dcaadec3a848",
            "user_token": "gBfvuS8m5Ba7tBuoApG-EU9jEtAjg30Lm1kGVwMHtlJxLmjMqnfdbs2vrKCY4PVHotlDZaKaK6deF8TB3A=="
        },
        "carlos@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "carlos@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840bc0a68196eccea1fb11",
            "user_token": "klgc9j8zk7FbJc1v5gCe_7MQr2rU5LwZmB1Va11fqBARPirHxHLUT9m0_96nvQ4cjK4CSynmZp_qJAytPw=="
        },
        "johnny@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "johnny@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840b92e0c596c3f78efc34",
            "user_token": "wNwc5hnYbqhUalPmEiJw74NRrr9b_EDrj1SagTdJFbCIWADLdARixqY5qMiiknH6qGVZzdyWn8amp8csPA=="
        },
        "ray@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "ray@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840bb49ffd8b97d1dfcfbd01",
            "user_token": "FQ9bTIcMFSbz2iyLnCXLE7Ez35pWPRmBEbe_kTpyr6_xKyGRU1gcHg-A7_UFP4SFPgLY_DgqhBOnmyiQvg=="
        },
        "robert@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "robert@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840bdcc7f4efdfa08cde8201",
            "user_token": "Rq97XUNeE0So6n4OLZ1OlYndSftdyi7zDFnrBMKmgFuPF9opui1Rp20KjIY8CBf8-KGpB0nRCBquY7PjqQ=="
        },
        "swm@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "swm@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840bb8808fd1cad7b78c44",
            "user_token": "FLsQZwlw8wqjzWaSvV6rHC26Nl2ib_qUl_ifF7RvNPJoti9_4bMQvXo1LujPrtbS184jHK2MWEePO_ymIg=="
        },
        "uberPortalPerson@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "uberPortalPerson@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840bb8b5ad8ad696b78fc801",
            "user_token": "sRi5zr2bRB_6uBM5afCWEr6oyzMp1timkY_viTden194eeJNylMpCxbtuCrAGsfnyd8_hzrBIlK-hSk4_g=="
        },
        "userTableUpdater@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "userTableUpdater@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840be283c396b8c7c0f99b01",
            "user_token": "xP9vSN-H5qfrA9N5_cYDz7HK3iECXvxNCMOJOv94Gt8NPSi1_l0ZAy9q2B-LBc1_2SGaz4IOdVgIwhiNJA=="
        },
        "zack@w2macfab.com": {
            "creation_date": "2016-12-08T17:15:01-06:00",
            "email": "zack@w2macfab.com",
            "job": null,
            "password": "password",
            "state": null,
            "tag_id": null,
            "user_id": "eaa5cf840be0dedfc0ced2dec331",
            "user_token": "xZPRYZfHyts37cDQJit8phVZNG6rpPKblqZEbrnoA_gr0waO8sAnKNPJJXe7tzfAyyBHlgszaZ70KcG0Aw=="
        }
    }
}