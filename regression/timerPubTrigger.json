{
    //
    //  This is a scenetest that attempts to touch all parts of the platform.
    //  This includes:
    //      code,
    //      data,
    //      messaging,
    //      timers,
    //      triggers,
    //      user stuff ?? not sure here yet.
    //

    "name": "Name of this test run",
    "scenarios": [ ["Trigger Watcher", 20], ["Create The Timer", 1], ["Subscriber", 20] ],
    "sequencing": "Parallel",

    /*
     *  globals are available and shared by all scenario instances
     */
    "globals": {
    },

    //
    //  These locals are available to all scenarios by using the "@varname" syntax.
    //  Declare big maps/arrays here so they don't clutter up the scenarios below.
    //  NOTE They are copied into
    //  each scenario's context and are NOT shared. ie, they're not global to all
    //  scenarios. Use "globals" for that.
    //
    "locals": {
        "iterations": 101,

        //
        // this is the thing that kicks off our Rube Goldberg machine. It is
        // created in "Create The Timer" below.
        //
        "uberTimer": {
            "name": "Heartbeat Timer",
            "description": "Publishes to /timer/popped",
            "start_time": "Now",
            "repeats": 100,
            "frequency": 1,
            "service_name": "handlePublish"
        }

    },


    //
    // This guy just starts the process by creating the uber timer.
    //
    "Create The Timer": {
        "name": "Get things going",
        "steps": [
            ["setUser", "foo@bar.com"],
            ["sync", "Ready For Timer", 41],
            ["createTimer", "@uberTimer"]
        ]
    },


    //
    //  Watch for the publish message send by the code service for the timer
    //
    "Trigger Watcher": {
        "name": "wait for triggers",
        "steps": [
            ["setUser", "bar@bar.com"],
            ["subscribeTriggers"],
            ["sync", "Ready For Timer", 41],
            ["repeat", "@iterations", [
                ["waitTrigger", "Messaging", "Publish", 300]]
            ]
        ]
    },

    //
    //  That timer service also publishes a message. Subscribe to it here
    //
    "Subscriber": {
        "name": "listen for messages",
        "steps": [
            ["setUser", "bar@bar.com"],
            ["subscribe", "/timer/popped", 1],
            ["sync", "Ready For Timer", 41],
            ["repeat", "@iterations", [
                ["waitMessage", "/timer/popped", 300]]
            ]
        ]
    }
}
